{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Instances to generate load on Kinesis Streams",
  "Parameters": {
    "KeyName": {
      "Description": "The EC2 Key Pair name to allow SSH access to the instances (Must already be present)",
      "Default": "internal",
      "Type": "String"
    },
    "VpcCidr": {
      "Description": "CIDR block reserved by VPC",
      "Default": "10.20.0.0/16",
      "Type": "String"
    },
    "SubPub1Cidr": {
      "Description": "CIDR block reserved by Public Subnet 1",
      "Default": "10.20.1.0/24",
      "Type": "String"
    },
    "SubPub2Cidr": {
      "Description": "CIDR block reserved by Public Subnet 2",
      "Default": "10.20.2.0/24",
      "Type": "String"
    },
    "StreamName": {
      "Description": "Stream Name",
      "Type": "String",
      "Default": "spark-example"
    },
    "ImageId": {
      "Description": "ImageId",
      "Type": "String",
      "Default": "ami-60b6c60a"
    },
    "AutoscalingMin": {
      "Description": "Minimum size of AutoScalingGroup",
      "Type": "String",
      "Default": "1"
    },
    "AutoscalingMax": {
      "Description": "Minimum size of AutoScalingGroup",
      "Type": "String",
      "Default": "1"
    },
    "SshCidr": {
      "Description": "Ingress IP for SSH Access (please change to your CIDR range)",
      "Type": "String",
      "Default": "0.0.0.0/0"
    },
    "InstanceType": {
      "Description": "Instance Type",
      "Type": "String",
      "Default": "c3.xlarge"
    },
    "S3FileNameGZ": {
      "Description": "S3 location of GZipped file with content to push to Kinesis (no prefix s3://",
      "Type": "String",
      "Default": "sdx-kinesis-load/NASA_access_log_Jul95.gz"
    },
    "RateLimit": {
      "Description": "% limit for pushing into Kinesis (defaults to aggressive 150 %)",
      "Type": "Number",
      "Default": "150"
    }
  },
  "Mappings": {
  },
  "Resources": {
    "vpc": {
      "Type": "AWS::EC2::VPC",
      "Properties": {
        "CidrBlock": {
          "Ref": "VpcCidr"
        },
        "InstanceTenancy": "default",
        "EnableDnsSupport": "true",
        "EnableDnsHostnames": "true"
      }
    },
    "igw": {
      "Type": "AWS::EC2::InternetGateway",
      "Properties": {
      }
    },
    "vpcIgw": {
      "Type": "AWS::EC2::VPCGatewayAttachment",
      "Properties": {
        "VpcId": {
          "Ref": "vpc"
        },
        "InternetGatewayId": {
          "Ref": "igw"
        }
      }
    },
    "subPub1": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "CidrBlock": {
          "Ref": "SubPub1Cidr"
        },
        "AvailabilityZone": {
          "Fn::Select": [
            0,
            {
              "Fn::GetAZs": ""
            }
          ]
        },
        "VpcId": {
          "Ref": "vpc"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "subPub1"
          }
        ]
      }
    },
    "subPub2": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "CidrBlock": {
          "Ref": "SubPub2Cidr"
        },
        "AvailabilityZone": {
          "Fn::Select": [
            1,
            {
              "Fn::GetAZs": ""
            }
          ]
        },
        "VpcId": {
          "Ref": "vpc"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "subPub2"
          }
        ]
      }
    },
    "subPub1Rt": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "vpc"
        }
      }
    },
    "subPub2Rt": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "vpc"
        }
      }
    },
    "subPub1Route": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {
          "Ref": "subPub1Rt"
        },
        "SubnetId": {
          "Ref": "subPub1"
        }
      }
    },
    "subPub1RouteConfig": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "DestinationCidrBlock": "0.0.0.0/0",
        "RouteTableId": {
          "Ref": "subPub1Rt"
        },
        "GatewayId": {
          "Ref": "igw"
        }
      }
    },
    "subPub2Route": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {
          "Ref": "subPub2Rt"
        },
        "SubnetId": {
          "Ref": "subPub2"
        }
      }
    },
    "subPub2RouteConfig": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "DestinationCidrBlock": "0.0.0.0/0",
        "RouteTableId": {
          "Ref": "subPub2Rt"
        },
        "GatewayId": {
          "Ref": "igw"
        }
      }
    },
    "lcKPL": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Properties": {
        "AssociatePublicIpAddress": "true",
        "ImageId": {
          "Ref": "ImageId"
        },
        "InstanceType": {
          "Ref": "InstanceType"
        },
        "IamInstanceProfile": {
          "Ref": "profileKPL"
        },
        "KeyName": {
          "Ref": "KeyName"
        },
        "SecurityGroups": [
          {
            "Ref": "sgSsh"
          }
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash\n",
                "yum update -y aws-cfn-bootstrap\n",
                "yum -y update\n",
                "yum -y install java-1.8.0\n",
                "yum -y remove java-1.7.0-openjdk\n",
                "yum -y install java-1.8.0-openjdk-devel\n",
                "yum -y install jsvc\n",
                "aws s3 cp s3://sdx-kinesis-load/kinesis-load-generator /home/ec2-user/\n",
                "mv /home/ec2-user/kinesis-load-generator /etc/init.d/\n",
                "chmod 755 /etc/init.d/kinesis-load-generator\n",
                "aws s3 cp s3://sdx-kinesis-load/logrotate.d/kinesis-load-generator /home/ec2-user/logrotate.d/kinesis-load-generator\n",
                "mv /home/ec2-user/kinesis-load-generator /etc/logrotate.d/\n",
                "cp /etc/cron.daily/logrotate /etc/cron.hourly/logrotate\n",
                "su -c 'mkdir -p /home/ec2-user/kinesis-load-generator/log' ec2-user\n",
                "aws s3 cp s3://sdx-kinesis-load/kinesis-load-generator-1.0-SNAPSHOT.jar ",
                "/home/ec2-user/kinesis-load-generator/kinesis-load-generator-1.0-SNAPSHOT.jar\n",
                "aws s3 cp s3://",
                {
                  "Ref": "S3FileNameGZ"
                },
                " /home/ec2-user/\n",
                "echo \"FILENAMEGZ=/home/ec2-user/`basename ",
                {
                  "Ref": "S3FileNameGZ"
                },
                "`\" > /home/ec2-user/kinesis-load-generator.config\n",
                "echo 'REGION=",
                {
                  "Ref": "AWS::Region"
                },
                "' >> /home/ec2-user/kinesis-load-generator.config\n",
                "echo 'STREAMNAME=",
                {
                  "Ref": "StreamName"
                },
                "' >> /home/ec2-user/kinesis-load-generator.config\n",
                "echo 'RATELIMIT=",
                {
                  "Ref": "RateLimit"
                },
                "' >> /home/ec2-user/kinesis-load-generator.config\n",
                "service kinesis-load-generator start\n",
                "\n"
              ]
            ]
          }
        }
      },
      "DependsOn": [
        "sgSsh",
        "profileKPL",
        "vpcIgw"
      ]
    },
    "asgKPL": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Properties": {
        "AvailabilityZones": [
          {
            "Fn::Select": [
              0,
              {
                "Fn::GetAZs": ""
              }
            ]
          },
          {
            "Fn::Select": [
              1,
              {
                "Fn::GetAZs": ""
              }
            ]
          }
        ],
        "MinSize": {
          "Ref": "AutoscalingMin"
        },
        "MaxSize": {
          "Ref": "AutoscalingMax"
        },
        "LaunchConfigurationName": {
          "Ref": "lcKPL"
        },
        "VPCZoneIdentifier": [
          {
            "Ref": "subPub1"
          },
          {
            "Ref": "subPub2"
          }
        ],
        "MetricsCollection": [
          {
            "Granularity": "1Minute"
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "",
                [
                  {"Ref": "AWS::StackName"}, "-KPL"
                ]
              ]
            },
            "PropagateAtLaunch": "true"
          }
        ]
      }
    },
    "sgSsh": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "SSH IN",
        "VpcId": {
          "Ref": "vpc"
        },
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "22",
            "ToPort": "22",
            "CidrIp": {
              "Ref": "SshCidr"
            }
          }
        ]
      }
    },
    "roleKPL": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "ec2.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "kinesis-cloudwatch",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": "kinesis:*",
                  "Resource": {
                    "Fn::Join": [
                      ":",
                      [
                        "arn:aws:kinesis",
                        {
                          "Ref": "AWS::Region"
                        },
                        {
                          "Ref": "AWS::AccountId"
                        },
                        {
                          "Fn::Join": [
                            "/",
                            [
                              "stream",
                              {
                                "Ref": "StreamName"
                              }
                            ]
                          ]
                        }
                      ]
                    ]
                  }
                },
                {
                  "Effect": "Allow",
                  "Action": "cloudwatch:*",
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "s3:GetObject",
                    "s3:ListObjects"
                  ],
                  "Resource": [{
                    "Fn::Join": [
                      "",
                      [
                        "arn:aws:s3:::",
                        {
                          "Ref": "S3FileNameGZ"
                        }
                      ]
                    ]
                  }, "arn:aws:s3:::sdx-kinesis-load/*", "arn:aws:s3:::sdx-kinesis-load/"]
                }
              ]
            }
          }
        ]
      }
    },
    "profileKPL": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": "/",
        "Roles": [
          {
            "Ref": "roleKPL"
          }
        ]
      },
      "DependsOn": [
        "roleKPL"
      ]
    }
  },
  "Outputs": {
  }
}